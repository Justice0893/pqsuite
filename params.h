
//PROTOKOL PARAMETRELERÝ

#ifndef _PARAMS_H
#define _PARAMS_H

#include "config.h"
#include <stdlib.h>
#include <stdint.h>
#include <string.h>


#define ParamSet ( AlgName & ParSet )

#if ((AlgName == FrodoKEM) && (ParSet == Set1))

#define PARAMS_N_AES 739
#define PARAMS_NPRIME_AES 513
#define PARAMS_NBAR 100
#define PARAMS_NBARBAR 100
#define PARAMS_N (((PARAMS_N_AES + 15) >> 4) << 4)
#define PARAMS_NPRIME (((PARAMS_NPRIME_AES + 15) >> 4) << 4)
#define PARAMS_LOGQ 15
#define PARAMS_Q (1 << PARAMS_LOGQ)
#define PARAMS_EXTRACTED_BITS 2
#define PARAMS_STRIPE_STEP 8
#define PARAMS_PARALLEL 4
#define BYTES_SEED_A 16
#define BYTES_MU (PARAMS_EXTRACTED_BITS*PARAMS_NBAR*PARAMS_NBAR)/8
#define CRYPTO_PUBLICKEYBYTES   (BYTES_SEED_A+(PARAMS_LOGQ*PARAMS_N*PARAMS_NBAR)/8)     // sizeof(seed_A) + (PARAMS_LOGQ*PARAMS_N*PARAMS_NBAR)/8
#define CRYPTO_BYTES              16
#define BYTES_PKHASH 0
#define CRYPTO_SECRETKEYBYTES  (CRYPTO_BYTES  + CRYPTO_PUBLICKEYBYTES + PARAMS_NPRIME*PARAMS_NBAR + PARAMS_N*PARAMS_NBAR)  +  BYTES_PKHASH  // sizeof(s) + CRYPTO_PUBLICKEYBYTES + 2*PARAMS_N*PARAMS_NBAR
#define CRYPTO_CIPHERTEXTBYTES  ((PARAMS_LOGQ*PARAMS_NPRIME*PARAMS_NBAR)/8 + (PARAMS_LOGQ*PARAMS_NBAR*PARAMS_NBAR)/8 + CRYPTO_BYTES)    // (PARAMS_LOGQ*PARAMS_N*PARAMS_NBAR)/8 + (PARAMS_LOGQ*PARAMS_NBAR*PARAMS_NBAR)/8 + CRYPTO_BYTES
#define TEMP_BYTES (CRYPTO_PUBLICKEYBYTES + BYTES_MU > CRYPTO_CIPHERTEXTBYTES + CRYPTO_BYTES)? CRYPTO_PUBLICKEYBYTES + BYTES_MU : CRYPTO_CIPHERTEXTBYTES + CRYPTO_BYTES
#define PARAMS_L 0

#elif ((AlgName == FrodoKEM) && (ParSet == Set2))

#define PARAMS_N 976
#define PARAMS_NPRIME 976
#define PARAMS_NBAR 8
#define PARAMS_NBARBAR 8
#define PARAMS_N_AES (((PARAMS_N + 15) >> 4) << 4)
#define PARAMS_NPRIME_AES (((PARAMS_NPRIME + 15) >> 4) << 4)
#define PARAMS_LOGQ 15
#define PARAMS_Q (1 << PARAMS_LOGQ)
#define PARAMS_EXTRACTED_BITS 2
#define PARAMS_STRIPE_STEP 8
#define PARAMS_PARALLEL 4
#define BYTES_SEED_A 16
#define BYTES_MU (PARAMS_EXTRACTED_BITS*PARAMS_NBAR*PARAMS_NBAR)/8
#define CRYPTO_PUBLICKEYBYTES   (BYTES_SEED_A+(PARAMS_LOGQ*PARAMS_N*PARAMS_NBAR)/8)     // sizeof(seed_A) + (PARAMS_LOGQ*PARAMS_N*PARAMS_NBAR)/8
#define CRYPTO_BYTES              16
#define BYTES_PKHASH 0
#define CRYPTO_SECRETKEYBYTES  (CRYPTO_BYTES  + CRYPTO_PUBLICKEYBYTES + PARAMS_NPRIME*PARAMS_NBAR + PARAMS_N*PARAMS_NBAR)  +  BYTES_PKHASH  // sizeof(s) + CRYPTO_PUBLICKEYBYTES + 2*PARAMS_N*PARAMS_NBAR
#define CRYPTO_CIPHERTEXTBYTES  ((PARAMS_LOGQ*PARAMS_NPRIME*PARAMS_NBAR)/8 + (PARAMS_LOGQ*PARAMS_NBAR*PARAMS_NBAR)/8 + CRYPTO_BYTES)    // (PARAMS_LOGQ*PARAMS_N*PARAMS_NBAR)/8 + (PARAMS_LOGQ*PARAMS_NBAR*PARAMS_NBAR)/8 + CRYPTO_BYTES
#define TEMP_BYTES (CRYPTO_PUBLICKEYBYTES + BYTES_MU > CRYPTO_CIPHERTEXTBYTES + CRYPTO_BYTES)? CRYPTO_PUBLICKEYBYTES + BYTES_MU : CRYPTO_CIPHERTEXTBYTES + CRYPTO_BYTES
#define PARAMS_L 0

#elif ((AlgName == FrodoKEM) && (ParSet == Set3))

#define PARAMS_N 1344
#define PARAMS_NPRIME 1344
#define PARAMS_NBAR 8
#define PARAMS_NBARBAR 8
#define PARAMS_N_AES (((PARAMS_N + 15) >> 4) << 4)
#define PARAMS_NPRIME_AES (((PARAMS_NPRIME + 15) >> 4) << 4)
#define PARAMS_LOGQ 15
#define PARAMS_Q (1 << PARAMS_LOGQ)
#define PARAMS_EXTRACTED_BITS 4
#define PARAMS_STRIPE_STEP 8
#define PARAMS_PARALLEL 4
#define BYTES_SEED_A 16
#define BYTES_MU (PARAMS_EXTRACTED_BITS*PARAMS_NBAR*PARAMS_NBAR)/8  //d nin boyutu ya da lambda
#define CRYPTO_PUBLICKEYBYTES   (BYTES_SEED_A+(PARAMS_LOGQ*PARAMS_N*PARAMS_NBAR)/8)     // sizeof(seed_A) + (PARAMS_LOGQ*PARAMS_N*PARAMS_NBAR)/8
#define CRYPTO_BYTES 32
#define BYTES_PKHASH CRYPTO_BYTES
#define CRYPTO_SECRETKEYBYTES  (CRYPTO_BYTES  + CRYPTO_PUBLICKEYBYTES + PARAMS_NPRIME*PARAMS_NBAR + PARAMS_N*PARAMS_NBAR) + BYTES_PKHASH    // sizeof(s) + CRYPTO_PUBLICKEYBYTES + 2*PARAMS_N*PARAMS_NBAR
#define CRYPTO_CIPHERTEXTBYTES  ((PARAMS_LOGQ*PARAMS_NPRIME*PARAMS_NBAR)/8 + (PARAMS_LOGQ*PARAMS_NBAR*PARAMS_NBAR)/8 + CRYPTO_BYTES)    // (PARAMS_LOGQ*PARAMS_N*PARAMS_NBAR)/8 + (PARAMS_LOGQ*PARAMS_NBAR*PARAMS_NBAR)/8 + CRYPTO_BYTES
#define TEMP_BYTES (CRYPTO_PUBLICKEYBYTES + BYTES_MU > CRYPTO_CIPHERTEXTBYTES + CRYPTO_BYTES)? CRYPTO_PUBLICKEYBYTES + BYTES_MU : CRYPTO_CIPHERTEXTBYTES + CRYPTO_BYTES
#define PARAMS_L 0

#elif ((AlgName == Lizard) && (ParSet == Set1))

#define PARAMS_N 1024	
#define PARAMS_NPRIME 536
#define PARAMS_NBAR 16		
#define PARAMS_NBARBAR 16		
#define PARAMS_L PARAMS_NBAR*PARAMS_NBARBAR
#define PublicKey_A (PARAMS_N * PARAMS_NPRIME * 2)
#define PublicKey_B (PARAMS_N * PARAMS_NBAR * 2)
#define PARAMS_N_AES (((PARAMS_N + 15) >> 4) << 4)
#define PARAMS_NPRIME_AES (((PARAMS_NPRIME + 15) >> 4) << 4)
#define PARAMS_LOGQ 11
#define BYTES_SEED_A 16
#define PARAMS_EXTRACTED_BITS 9
#define PARAMS_STRIPE_STEP 8
#define PARAMS_PARALLEL 4
#define BYTES_PKHASH 0
#define _16_LOG_Q 5
#define LOG_P 9
#define RD_ADD 0x40 	// 2^(15 - LOG_P)
#define RD_AND 0xff80
#define HR 140			// Hamming weight of coefficient vector r
#define LOG_T 1
#define _16_LOG_T 15
#define T 2
#define DEC_ADD 0x4000	// 2^(15 - LOG_T)
#define LAMBDA 128	
#define BYTES_MU LAMBDA
#define CRYPTO_SECRETKEYBYTES (PARAMS_NPRIME * PARAMS_NBAR) + (PARAMS_L / 8)
#define CRYPTO_PUBLICKEYBYTES (PublicKey_A + PublicKey_B)
#define CRYPTO_BYTES 32
#define CRYPTO_CIPHERTEXTBYTES ((PARAMS_NPRIME * PARAMS_NBARBAR * 2) + (PARAMS_NBAR * PARAMS_NBARBAR * 2) + (LAMBDA / 4))
#define TEMP_BYTES (CRYPTO_PUBLICKEYBYTES + BYTES_MU > CRYPTO_CIPHERTEXTBYTES + CRYPTO_BYTES)? CRYPTO_PUBLICKEYBYTES + BYTES_MU : CRYPTO_CIPHERTEXTBYTES + CRYPTO_BYTES

//#error PARAMS_N
#endif



#endif
